<?xml version='1.0' encoding='UTF-8'?>
<com.cloudbees.plugins.credentials.SystemCredentialsProvider plugin="credentials@1.24">
  <domainCredentialsMap class="hudson.util.CopyOnWriteMap$Hash">
    {% for domain in jenkins.security.credentials %}
    <entry>
      <com.cloudbees.plugins.credentials.domains.Domain>
        {% if domain.domain == 'GLOBAL' %}
        <specifications/>
        {% else %}
        <name>{{ domain.domain }}</name>
        <description>{{ domain.description|default('') }}</description>
        <specifications>
          <com.cloudbees.plugins.credentials.domains.HostnameSpecification>
            <includes>{{ domain.hostname }}</includes>
          </com.cloudbees.plugins.credentials.domains.HostnameSpecification>
          <com.cloudbees.plugins.credentials.domains.SchemeSpecification>
            <schemes class="linked-hash-set">
              <string>{{ domain.uri_scheme }}</string>
            </schemes>
          </com.cloudbees.plugins.credentials.domains.SchemeSpecification>
          <com.cloudbees.plugins.credentials.domains.PathSpecification>
            <includes>{{ domain.uri_path }}</includes>
            <caseSensitive>false</caseSensitive>
          </com.cloudbees.plugins.credentials.domains.PathSpecification>
        </specifications>
        {% endif %}
      </com.cloudbees.plugins.credentials.domains.Domain>
      <java.util.concurrent.CopyOnWriteArrayList>
      {% for ssh in domain.ssh_keys %}
        <com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey plugin="ssh-credentials@1.11">
          <scope>GLOBAL</scope>
          <id>{{ ssh.uuid }}</id>
          <description>{{ ssh.description|default('') }}</description>
          <username>{{ ssh.username }}</username>
          <passphrase>{{ ssh.passphrase|jenkins_encrypt(jenkins_master_key, jenkins_secret_key) }}</passphrase>
          {% if ssh.private_key|default('') %}
          <privateKeySource class="com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey$DirectEntryPrivateKeySource">
            <privateKey>{{ ssh.private_key }}</privateKey>
          </privateKeySource>
          {% else %}
          {% if ssh.private_key_path|default('') %}
          <privateKeySource class="com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey$FileOnMasterPrivateKeySource">
            <privateKeyFile>{{ ssh.private_key_path }}</privateKeyFile>
          </privateKeySource>
          {% else %}
          <privateKeySource class="com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey$UsersPrivateKeySource"/>
          {% endif %}
          {% endif %}
        </com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey>
      {% endfor %}
      {% for auth in domain.basic_auth %}
        <com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl>
          <scope>GLOBAL</scope>
          <id>{{ auth.uuid }}</id>
          <description>{{ auth.description|default('') }}</description>
          <username>{{ auth.username }}</username>
          <password>{{ auth.password|jenkins_encrypt(jenkins_master_key, jenkins_secret_key) }}</password>
        </com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl>
      {% endfor %}
      {% for token in domain.tokens %}
        <org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl plugin="plain-credentials@1.1">
          <scope>GLOBAL</scope>
          <id>{{ token.uuid }}</id>
          <description>{{ token.description|default('') }}</description>
          <secret>{{ token.secret|jenkins_encrypt(jenkins_master_key, jenkins_secret_key) }}</secret>
        </org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl>
      {% endfor %}
      </java.util.concurrent.CopyOnWriteArrayList>
    </entry>
    {% endfor %}
  </domainCredentialsMap>
</com.cloudbees.plugins.credentials.SystemCredentialsProvider>